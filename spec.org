
* Directory structure

  - archer/
    - lib/
      - archer/
        - map.bash
        - layer.bash
        - array.bash
        - core.bash
    - etc/
      - archer/
        - layer/
          - app/
            - emacs/
              - setup.bash
              - metadata.bash
    - bin/
      - archer
      - archer.bash
    - test/
      - bin/
        - test-archer.bash
      - lib/
        - test-archer.bash
        - archer/
          - test-map.bash
          - test-layer.bash
          - test-core.bash
          - test-array.bash
 
* archer/core.bash

** archer_core_init <source-path> <work-path>
** ARCHER_CORE_PREFIX_DIR

* archer/map.bash

** archer_map_insert <map:identifier> <value>
** archer_map_insert_or_assign <map:identifier> <value>
** archer_map_remove <map:identifier> <value>
** archer_map_hash <map:identifier> <input-string:string> <output-identifier-var:identifier>
** archer_map_static_default_hash <input-string:string> <output-identifier-ver:identifier>
** archer_map_init <map:identifier>
** archer_map_fini <map:identifier>
** archer_map_keys <map:identifier> <out-keys-array-var:identifier>
** archer_map_keys_count <map:identifier> <out-count-var:identifier>
** archer_map_op_assign <map:identifier> <from-map:identifier> 
** archer_map_at
** archer_map_var_at
** archer_map_has_key

* archer/
** archer_algorithm_topo_sort <adjency-vertex-getter> <sorted-vertexs:array> <detected-cycled-vertex:array.map>

#+BEGIN_SRC text
   + > 0 > + 
   ^       v
   3 < 4 < 1
   ^       v
   + < 2 < +
#+END_SRC
   

#+BEGIN_SRC bash
test_vertex_getter() {
if test "${1}" -lt 0 -o "${1}" -gt 4
then
  return 1
fi
local v=(v0 v1 v2 v3 v4)
local v0=(1)
local v1=(2 4)
local v2=(3)
local v3=(0)
local v4=(3)
local vx="v[${1}]"
local vertex=
eval vertex="${vx}"[]
}
   archer_algorithm_topo_sort
#+END_SRC

   
* archer/layer.bash
  
** archer_layer_dependencies <layer:string> <out-dep-layers:array>
** archer_layer_exist <layer:string> [out-result:bool]
** archer_layer_run <layer:string> <command:string> [args...]
** archer_layer_run_with_dependencies <layer:string> <command:string> [args...]
** archer_layer_run_layers <layers:array> <command:string> [args...]
** archer_layer_run_layers_with_dependencies <layer:string> <command:string> [args...]
** archer_layer_list_layers
** archer_layer_resolve_dependencies <layers> <out-layer>
#+BEGIN_SRC text
   + > 0 > + 
   ^       v
   3 < 4 < 1
   ^       v
   + < 2 < +
#+END_SRC
   layers=(0)
   archer_layer_resolve_dependencies layers out
   # out=("3 0" 2 4 1 0)
* <layer>/main.bash

#+BEGIN_SRC bash 
echo do some configration setup right now ...
#+END_SRC

* <layer>/metadata.bash

#+BEGIN_SRC bash 
LAYER=emacs
LAYER_DEPENDENCIES=(
  lang/c-c++
  lang/javascript
)
#+END_SRC

* bin/archer.bash

** archer [args...]

* Types
** layer notation 
  example layer notation, lang/javascript
